name: Auto Publish on Merge

on:
  push:
    branches: [ main ]

concurrency:
  group: auto-publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  bump_and_tag:
    # Skip if this push is already the release bump commit or a tag push
    if: >-
      ${{ !startsWith(github.ref, 'refs/tags/') && !contains(github.event.head_commit.message, '[release-bump]') }}
    runs-on: ubuntu-latest
    environment: npm-publish
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: 20.x
          cache: npm
          registry-url: 'https://registry.npmjs.org'

      - name: Install jq (used for version existence check)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determine bump type from PR labels/title (default patch)
        id: bump
        env:
          GH_TOKEN: ${{ github.token }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          set -euo pipefail
          BUMP="patch"
          PR_NUM=$(printf "%s" "$COMMIT_MSG" | sed -n 's/.*(#\([0-9]\+\)).*/\1/p') || true
          if [ -n "${PR_NUM:-}" ]; then
            info=$(gh pr view "$PR_NUM" --json labels,title --jq '{labels: [.labels[].name], title: .title}' || echo '{}')
            title=$(echo "$info" | jq -r '.title // ""')
            labels=$(echo "$info" | jq -r '.labels // [] | join(",")')
            shopt -s nocasematch || true
            # Semver label overrides
            if echo "$labels" | grep -Eqi '\b(semver:major|release[:/ ]?major|type[:/ ]?major)\b'; then
              BUMP="major"
            elif echo "$labels" | grep -Eqi '\b(semver:minor|release[:/ ]?minor|type[:/ ]?minor)\b'; then
              BUMP="minor"
            fi
            if echo "$labels" | grep -Eqi '(release[:/ ]|semver[:/ ]|type[:/ ])?\s*major|\bmajor\b'; then
              BUMP="major"
            elif echo "$labels" | grep -Eqi '(release[:/ ]|semver[:/ ]|type[:/ ])?\s*minor|\bminor\b'; then
              BUMP="minor"
            elif printf "%s" "$title" | grep -Eq '^feat(\(|:|!)'; then
              BUMP="minor"
            fi
            # Exact version from package.json
            if echo "$labels" | grep -Eqi '\b(release:use-version|release:exact)\b'; then
              BUMP="none"
            fi
            shopt -u nocasematch || true
          fi
          echo "bump=$BUMP" >> "$GITHUB_OUTPUT"
          echo "Selected bump: $BUMP (PR #${PR_NUM:-n/a})"

      - name: Configure git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Install deps
        run: npm ci

      - name: Generate OpenAPI types (optional)
        if: ${{ vars.FLUXOMAIL_OPENAPI != '' }}
        env:
          FLUXOMAIL_OPENAPI: ${{ vars.FLUXOMAIL_OPENAPI }}
        run: npm run codegen:openapi

      - name: Run tests
        run: npm test

      - name: Verify package contents
        run: npm run ci:pack-check

      - name: Bump version and create tag
        id: bumpver
        env:
          BUMP: ${{ steps.bump.outputs.bump }}
        run: |
          set -euo pipefail
          if [ "${BUMP}" = "none" ]; then
            echo "Using existing package.json version (no bump)"
          else
            # Initial bump without creating a tag; commit may be blocked by protection later.
            npm version "$BUMP" --no-git-tag-version
          fi
          V=$(node -p "require('./package.json').version")
          # If tag already exists (e.g., from a previous attempt), keep bumping patch until free
          while git rev-parse -q --verify "refs/tags/v$V" >/dev/null; do
            echo "Tag v$V exists; bumping patch to avoid collision"
            npm version patch --no-git-tag-version
            V=$(node -p "require('./package.json').version")
          done
          git add -A
          git commit -m "chore(main): release $V [release-bump]" || true
          git tag -a "v$V" -m "Release v$V" || true
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Preflight: NPM token present
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "NPM_TOKEN secret is not configured for environment 'npm-publish'." >&2
            exit 1
          fi

      - name: Who am I (npm)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm whoami || true

      - name: Check if version already on npm
        id: exists
        run: |
          set -euo pipefail
          V="${{ steps.bumpver.outputs.version }}"
          echo "Checking npm for version $V"
          if npm view @fluxomail/sdk versions --json | jq -e ". | index(\"$V\")" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Version $V already published; skipping publish"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm with provenance
        if: steps.exists.outputs.exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public

      - name: Push commit and tags
        id: push
        run: |
          set -e
          # Always push tags first (safe + idempotent)
          git push origin --tags || true
          # Try pushing the bump commit to main; record exit code for PR fallback
          set +e
          git push origin HEAD:main --follow-tags
          ec=$?
          set -e
          echo "push_status=$ec" >> "$GITHUB_OUTPUT"

      - name: Create bump branch when main push blocked
        if: steps.push.outputs.push_status != '0'
        id: bumpbranch
        run: |
          set -euo pipefail
          BR="release/bump-v${{ steps.bumpver.outputs.version }}"
          git push origin "HEAD:refs/heads/$BR" --force
          echo "branch=$BR" >> "$GITHUB_OUTPUT"

      - name: Open bump PR from branch
        if: steps.push.outputs.push_status != '0'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const owner = context.repo.owner
            const repo = context.repo.repo
            const version = process.env.VERSION
            const head = process.env.HEAD_BRANCH
            const base = 'main'
            const fs = require('fs')
            let body = ''
            try {
              body = fs.readFileSync('.github/PULL_REQUEST_TEMPLATE/release-bump.md', 'utf8')
              body = body.replaceAll('{{VERSION}}', version)
            } catch (e) {
              body = `Automated release bump to ${version}`
            }
            // If PR already open, do nothing
            const existing = await github.rest.pulls.list({ owner, repo, head: `${owner}:${head}`, state: 'open' })
            if (existing.data?.length) {
              core.info(`Bump PR already exists: ${existing.data[0].html_url}`)
              return
            }
            const title = `chore(main): release ${version} [release-bump]`
            const pr = await github.rest.pulls.create({ owner, repo, title, head, base, body })
            core.info(`Opened bump PR: ${pr.data.html_url}`)
            try {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pr.data.number, labels: ['release-bump','semver:patch'] })
            } catch (e) {
              core.warning(`Could not add labels: ${e?.message || e}`)
            }
        env:
          VERSION: ${{ steps.bumpver.outputs.version }}
          HEAD_BRANCH: ${{ steps.bumpbranch.outputs.branch }}
        continue-on-error: true

      - name: Summary
        run: |
          echo "Auto-release bump completed. Version ${{ steps.bumpver.outputs.version }}. If commit push was blocked by branch protection, the tag was still pushed and publish executed in this job."
