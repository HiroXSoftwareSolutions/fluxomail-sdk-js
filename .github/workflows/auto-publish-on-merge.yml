name: Publish Package On Main Merge

on:
  push:
    branches: [ main ]

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.detect.outputs.release }}
      version: ${{ steps.detect.outputs.version }}
      previous_version: ${{ steps.detect.outputs.previous_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 2

      - name: Detect package version change
        id: detect
        run: |
          set -euo pipefail
          CURRENT=$(node -p "require('./package.json').version")
          PREV=""
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            PREV=$(git show HEAD^:package.json 2>/dev/null | node -pe "JSON.parse(require('fs').readFileSync(0,'utf8')).version" || true)
          fi
          if [ -z "$PREV" ]; then
            echo "No previous version detected (likely first run); treating as release."
          elif [ "$PREV" = "$CURRENT" ]; then
            echo "Version unchanged ($CURRENT); skipping publish."
            echo "release=false" >> "$GITHUB_OUTPUT"
            echo "version=$CURRENT" >> "$GITHUB_OUTPUT"
            echo "previous_version=$PREV" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "release=true" >> "$GITHUB_OUTPUT"
          echo "version=$CURRENT" >> "$GITHUB_OUTPUT"
          echo "previous_version=$PREV" >> "$GITHUB_OUTPUT"
          echo "Detected version bump: $PREV -> $CURRENT"

      - name: Release not required summary
        if: ${{ steps.detect.outputs.release != 'true' }}
        run: echo "No package version change detected."

  publish:
    needs: detect
    if: ${{ needs.detect.outputs.release == 'true' }}
    runs-on: ubuntu-latest
    environment: npm-publish
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: 20.x
          cache: npm
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Generate OpenAPI types (optional)
        if: ${{ vars.FLUXOMAIL_OPENAPI != '' }}
        env:
          FLUXOMAIL_OPENAPI: ${{ vars.FLUXOMAIL_OPENAPI }}
        run: npm run codegen:openapi

      - name: Run tests
        run: npm test

      - name: Verify package contents
        run: npm run ci:pack-check

      - name: Ensure npm token is configured
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "NPM_TOKEN secret is not configured for environment 'npm-publish'." >&2
            exit 1
          fi

      - name: Check if version already on npm
        id: exists
        env:
          VERSION: ${{ needs.detect.outputs.version }}
        run: |
          set -euo pipefail
          if npm view @fluxomail/sdk@"$VERSION" version >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Version $VERSION already available on npm; skipping publish."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure git for tagging
        if: ${{ steps.exists.outputs.exists == 'false' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Create and push tag
        if: ${{ steps.exists.outputs.exists == 'false' }}
        env:
          VERSION: ${{ needs.detect.outputs.version }}
        run: |
          set -euo pipefail
          TAG="v$VERSION"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Tag $TAG already exists; skipping creation."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Publish package with provenance
        if: ${{ steps.exists.outputs.exists == 'false' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public

      - name: Summary
        run: |
          echo "Publish workflow completed for version ${{ needs.detect.outputs.version }} (already existed: ${{ steps.exists.outputs.exists == 'true' }})"
